{"history":[{"breakpoints":[{"max":null,"min":992,"props":{"opacity":1,"translateY":-0.5,"size":0.729,"translateX":0,"fitToCanvas":1},"name":"Desktop"}],"visible":true,"locked":false,"aspectRatio":1,"layerName":"","isElement":true,"opacity":1,"displace":0,"trackMouse":0,"mouseMomentum":0,"blendMode":"NORMAL","bgDisplace":0,"mask":0,"maskBackground":{"type":"Vec3","_x":0,"_y":0,"_z":0},"maskAlpha":0,"maskDepth":0,"dispersion":0,"axisTilt":0,"states":{"appear":[],"scroll":[],"hover":[]},"layerType":"image","imageLoaded":false,"effects":[],"size":0.729,"rotation":0,"height":1038,"fitToCanvas":1,"scaleX":1,"scaleY":1,"src":"https://assets.unicorn.studio/images/JvyMwZcNgQfs53gbk8chlfW1W5D3/Frame 23 (17).png","translateX":0,"translateY":-0.5,"width":1920,"compiledFragmentShaders":["#version 300 es\nprecision mediump float; in vec2 vTextureCoord; in vec3 vVertexPosition;uniform sampler2D uBgTexture; uniform sampler2D uTexture; uniform vec2 uMousePos; uniform int uSampleBg;out vec4 fragColor;void main() { vec2 uv = vTextureCoord; vec2 pos = mix(vec2(0), (uMousePos - 0.5), 0.00);uv = uv - pos;vec4 color = texture(uTexture, uv); vec4 background = vec4(0);if(uSampleBg == 1) { background = texture(uBgTexture, vTextureCoord); }color = mix(background, color / max(color.a, 0.0001), color.a * 1.00);fragColor = color; }"],"compiledVertexShaders":["#version 300 es\nprecision mediump float;in vec3 aVertexPosition; in vec2 aTextureCoord;uniform mat4 uMVMatrix; uniform mat4 uPMatrix; uniform mat4 uTextureMatrix; uniform vec2 uMousePos;out vec2 vTextureCoord; out vec3 vVertexPosition;void main() { float angleX = uMousePos.y * 0.5 - 0.25; float angleY = (1.-uMousePos.x) * 0.5 - 0.25; mat4 rotateX = mat4(1.0, 0.0, 0.0, 0.0, 0.0, cos(angleX), -sin(angleX), 0.0, 0.0, sin(angleX), cos(angleX), 0.0, 0.0, 0.0, 0.0, 1.0); mat4 rotateY = mat4(cos(angleY), 0.0, sin(angleY), 0.0, 0.0, 1.0, 0.0, 0.0, -sin(angleY), 0.0, cos(angleY), 0.0, 0.0, 0.0, 0.0, 1.0);mat4 rotationMatrix = rotateX * rotateY; gl_Position = uPMatrix * uMVMatrix * vec4(aVertexPosition, 1.0); vVertexPosition = (rotationMatrix * vec4(aVertexPosition, 1.0)).xyz; vTextureCoord = (uTextureMatrix * vec4(aTextureCoord, 0.0, 1.0)).xy; }"]},{"breakpoints":[{"name":"Desktop","props":{"frequency":1,"angle":0,"mouseMomentum":0.43,"amount":0.07,"speed":0.13,"scale":0.37,"pos":{"type":"Vec2","_x":0.4872093023255814,"_y":0.5558889722430608},"texture":["lady-map (4).png","https://firebasestorage.googleapis.com/v0/b/unicorn-studio.appspot.com/o/JvyMwZcNgQfs53gbk8chlfW1W5D3%2Flady-map%20(4)_%40thumbnail.png?alt=media&token=effecc31-bbda-45ea-b6b1-9e2821beb077","uCustomTexture","https://assets.unicorn.studio/images/JvyMwZcNgQfs53gbk8chlfW1W5D3/lady-map (4).png"]},"min":992,"max":null},{"props":{"scale":0.37,"texture":["https://firebasestorage.googleapis.com/v0/b/unicorn-studio.appspot.com/o/JvyMwZcNgQfs53gbk8chlfW1W5D3%2Flady-map%20(4)_%40thumbnail.png?alt=media&token=effecc31-bbda-45ea-b6b1-9e2821beb077","uCustomTexture","https://assets.unicorn.studio/images/JvyMwZcNgQfs53gbk8chlfW1W5D3/lady-map (4).png","lady-map (4).png"]},"min":576,"name":"Tablet","max":991},{"props":{"texture":["https://firebasestorage.googleapis.com/v0/b/unicorn-studio.appspot.com/o/JvyMwZcNgQfs53gbk8chlfW1W5D3%2Flady-map%20(4)_%40thumbnail.png?alt=media&token=effecc31-bbda-45ea-b6b1-9e2821beb077","uCustomTexture","https://assets.unicorn.studio/images/JvyMwZcNgQfs53gbk8chlfW1W5D3/lady-map (4).png","lady-map (4).png"]},"max":575,"name":"Mobile","min":0}],"visible":true,"aspectRatio":1,"layerType":"effect","type":"custom","texture":{"name":"lady-map (4).png","thumb":"https://firebasestorage.googleapis.com/v0/b/unicorn-studio.appspot.com/o/JvyMwZcNgQfs53gbk8chlfW1W5D3%2Flady-map%20(4)_%40thumbnail.png?alt=media&token=effecc31-bbda-45ea-b6b1-9e2821beb077","sampler":"uCustomTexture","src":"https://assets.unicorn.studio/images/JvyMwZcNgQfs53gbk8chlfW1W5D3/lady-map (4).png"},"speed":0.13,"mouseMomentum":0.43,"animating":true,"isMask":0,"customFragmentShaders":["#version 300 es\nprecision mediump float;\n\n// Input texture coordinates from the vertex shader\nin vec2 vTextureCoord;\n\n// Define the uniforms\nuniform vec2 uResolution;     // width and height of the screen\nuniform vec2 uMousePos;       // mouse position\nuniform float uAmount;        // scale factor for the 3D effect intensity\nuniform sampler2D uTexture;   // main texture\nuniform sampler2D uCustomTexture; // depth map\n\n// Define the output color\nout vec4 fragColor;\n\n// Function to handle mirrored UVs\nvec2 mirrored(vec2 v) {\n  vec2 m = mod(v, 2.0);\n  return mix(m, 2.0 - m, step(1.0, m));\n}\n\nvoid main() {\n  // Calculate aspect ratios\n  float textureAspectRatio = float(textureSize(uCustomTexture, 0).x) / float(textureSize(uCustomTexture, 0).y);\n  float windowAspectRatio = uResolution.x / uResolution.y;\n\n  // Determine the scaling factor and offsets\n  vec2 scale = vec2(1.0);\n  vec2 offset = vec2(0.0);\n\n  if (windowAspectRatio > textureAspectRatio) {\n    scale.y = textureAspectRatio / windowAspectRatio;\n    offset.y = (1.0 - scale.y) * 0.5;\n  } else {\n    scale.x = windowAspectRatio / textureAspectRatio;\n    offset.x = (1.0 - scale.x) * 0.5;\n  }\n\n  // Adjust and center the texture coordinates\n  vec2 adjustedUv = vTextureCoord * scale + offset;\n\n  // Get the texture from the depth map\n  vec4 depthMap = texture(uCustomTexture, mirrored(adjustedUv));\n\n  // Calculate the fake 3D offset\n  vec2 offset3D = (depthMap.r - 0.5) * uAmount * (uMousePos - vec2(0.5));\n\n  // Apply the fake 3D offset\n  vec2 fake3D = vTextureCoord + offset3D;\n\n  // Get the color from the main texture using the fake 3D coordinates\n  vec4 color = texture(uTexture, mirrored(fake3D));\n\n  // Set the output color of our pixel to the main texture color\n  fragColor = color;\n}\n"],"customVertexShaders":["#version 300 es\nprecision mediump float;\n\nin vec3 aVertexPosition;  // Vertex position input\nin vec2 aTextureCoord;    // Texture coordinates input\n\nout vec2 vTextureCoord;   // Pass texture coordinates to the fragment shader\n\nvoid main() {\n    // Set the position of the vertex in normalized device coordinates (NDC)\n    gl_Position = vec4(aVertexPosition, 1.0);\n\n    // Pass the texture coordinates to the fragment shader\n    vTextureCoord = aTextureCoord;\n}\n"],"compiledFragmentShaders":["#version 300 es\nprecision mediump float;in vec2 vTextureCoord;uniform vec2 uResolution; uniform vec2 uMousePos; uniform sampler2D uTexture; uniform sampler2D uCustomTexture;out vec4 fragColor;vec2 mirrored(vec2 v) { vec2 m = mod(v, 2.0); return mix(m, 2.0 - m, step(1.0, m)); }void main() { float textureAspectRatio = float(textureSize(uCustomTexture, 0).x) / float(textureSize(uCustomTexture, 0).y); float windowAspectRatio = uResolution.x / uResolution.y; vec2 scale = vec2(1.0); vec2 offset = vec2(0.0);if (windowAspectRatio > textureAspectRatio) { scale.y = textureAspectRatio / windowAspectRatio; offset.y = (1.0 - scale.y) * 0.5; } else { scale.x = windowAspectRatio / textureAspectRatio; offset.x = (1.0 - scale.x) * 0.5; } vec2 adjustedUv = vTextureCoord * scale + offset; vec4 depthMap = texture(uCustomTexture, mirrored(adjustedUv)); vec2 offset3D = (depthMap.r - 0.5) * 0.07 * (uMousePos - vec2(0.5)); vec2 fake3D = vTextureCoord + offset3D; vec4 color = texture(uTexture, mirrored(fake3D)); fragColor = color; }"],"compiledVertexShaders":["#version 300 es\nprecision mediump float;in vec3 aVertexPosition; in vec2 aTextureCoord;out vec2 vTextureCoord;void main() { gl_Position = vec4(aVertexPosition, 1.0); vTextureCoord = aTextureCoord; }"],"data":{"depth":false,"uniforms":{"scale":{"name":"uScale","type":"1f","value":0.5}}}}],"options":{"name":"Copy of Untitled project","fps":60,"dpi":1.5,"scale":1,"includeLogo":false,"isProduction":false,"freePlan":false},"version":"1.3.2"}
